---
description: Deployment and operations guidelines
globs: deploy.sh,install.sh,*.service
---

## üèóÔ∏è Chief Software Architect Role
- **Complete Analysis**: Understand full deployment impact before changes
- **Resource Optimization**: Design for minimal server resource usage
- **Risk Management**: Identify and warn about deployment risks
- **Precise Execution**: Implement exactly what's requested
- **System Thinking**: Consider interactions with all system components

### üö® CRITICAL: Development Protocol Compliance
**MANDATORY before any deployment coding:**
- **Never deploy without complete understanding** of requirements and risks
- **Assess system impact** on existing services and architecture
- **Production-ready deployments only** - no experimental or partial solutions
- **Explicit approval required** for any additions beyond requested scope
- **Clear warning required** if deployment may cause performance or compatibility issues

# Deployment & Operations Standards

## üöÄ Deployment Architecture

This project supports **dual deployment methods** with **integrated web panel**:
- **Recommended**: Python-based via [deploy.sh](mdc:deploy.sh) - Includes CLI + Web Panel + API
- **Legacy**: Shell-based via [install.sh](mdc:install.sh) - CLI only

### Web Panel Deployment Components
- **Flask API Server**: RESTful backend with authentication
- **Static Frontend**: Pre-built PWA served by Flask
- **Systemd Integration**: API service with automatic restart
- **Environment Configuration**: API key and security settings

## üìã Critical Deployment Rules

### File Permissions Management
- **ALWAYS** set execute permissions on Python scripts during deployment
- Use `chmod +x` in deployment scripts before creating symlinks
- Verify permissions after file operations
- Handle permission issues gracefully in wrapper scripts

### System Integration
- Create systemd services for:
  - `openvpn@server-cert` (certificate-based)
- `openvpn@server-login` (username/password-based)  
  - `openvpn-uds-monitor` (UDS-based traffic monitoring daemon)
  - `openvpn-api` (web panel Flask API server)
- Enable services with proper dependencies and restart policies
- Configure log rotation and cleanup for all services
- Set up port forwarding for web panel access (default: 5000)

### Security Hardening
- Run services as `nobody:nogroup` when possible (except API which needs root for OpenVPN operations)
- Set restrictive file permissions on certificates and keys
- Configure firewall rules for OpenVPN servers and web panel port
- Enable IP forwarding in system configuration
- **API Security**: Generate secure API key and store in environment variables
- **Frontend Security**: Serve static files with security headers

## üîß Operations Guidelines

### Monitoring Service Management
- Monitor service runs continuously as systemd daemon
- Automatic restart on failure with exponential backoff
- Centralized logging to `/var/log/openvpn/traffic_monitor.log`
- Log rotation at 10MB threshold

### Backup Strategy
- Database backup includes all user data and quotas
- Certificate backup includes PKI directory
- Configuration backup includes OpenVPN settings
- Encrypted backup files with password protection

### Troubleshooting
- Check systemd service status: 
  - `systemctl status openvpn-uds-monitor`
  - `systemctl status openvpn-api`
- Monitor logs: 
  - `tail -f /var/log/openvpn/traffic_monitor.log`
  - `journalctl -u openvpn-api -f`
- Verify OpenVPN management interfaces are accessible
- Test database connectivity and permissions
- **Web Panel**: Test API health endpoint: `curl http://localhost:5000/api/health`
- **Authentication**: Verify API key configuration in environment

## üõ†Ô∏è Maintenance Tasks
- Regular log rotation and cleanup
- Database vacuum operations for SQLite
- Certificate renewal monitoring
- Quota usage reporting and alerts