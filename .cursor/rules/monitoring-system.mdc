---
description: Traffic monitoring system guidelines and patterns
globs: scripts/*.py,*monitor*.py
---

## üë®‚Äçüíª Principal Developer Standards
- **System Designer Mindset**: Always consider impact on overall architecture
- **Performance First**: Optimize for low-resource servers
- **Clean Code**: No inline comments, English docstrings only
- **Risk Assessment**: Alert about potential monitoring system risks

# Traffic Monitoring System Rules

## üîç Monitoring Architecture

The traffic monitoring system is the **core feature** of this OpenVPN manager. It provides real-time quota enforcement and traffic logging.

### Key Components
- **Monitor Service**: [scripts/monitor_service.py](mdc:scripts/monitor_service.py) - Main monitoring daemon
- **Connection Hook**: [scripts/on_connect.py](mdc:scripts/on_connect.py) - Pre-connection quota check
- **Disconnection Hook**: [scripts/on_disconnect.py](mdc:scripts/on_disconnect.py) - Traffic recording

## ‚ö° Critical Monitoring Rules

### Real-time Processing
- Monitor service connects to **both** certificate and login server management interfaces
- Use separate socket connections for each server type
- Parse `CLIENT_LIST` entries from OpenVPN status output
- Combine traffic data when users connect to multiple servers

### Quota Enforcement Strategy
1. **Pre-connection check**: Block users who already exceeded quota
2. **Real-time monitoring**: Track incremental traffic and disconnect violators
3. **Post-disconnection recording**: Update database with session traffic

### Error Resilience
- Implement exponential backoff for connection failures
- Handle socket timeouts gracefully
- Continue monitoring even if one server connection fails
- Log all errors with timestamps and context

### Performance Optimization
- Track incremental traffic changes (not absolute values)
- Clean up disconnected user tracking data
- Use efficient CLIENT_LIST parsing
- Implement log rotation to prevent disk space issues

## üõ°Ô∏è Data Integrity
- Use database transactions for traffic updates
- Validate traffic data before recording
- Handle concurrent access to user quota data
- Maintain audit trail in `traffic_logs` table

### Configuration
- All monitoring settings in [environment.env](mdc:environment.env)
- Support for configurable check intervals
- Flexible log file locations
- Database path configuration